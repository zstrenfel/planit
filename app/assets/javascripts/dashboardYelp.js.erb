if (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {
    module.exports = OAuth;
    var CryptoJS = require("crypto-js");
}

/**
 * Constructor
 * @param {Object} opts consumer key and secret
 */
function OAuth(opts) {
    if(!(this instanceof OAuth)) {
        return new OAuth(opts);
    }

    if(!opts) {
        opts = {};
    }

    if(!opts.consumer) {
        throw new Error('consumer option is required');
    }

    this.consumer            = opts.consumer;
    this.signature_method    = opts.signature_method || 'HMAC-SHA1';
    this.nonce_length        = opts.nonce_length || 32;
    this.version             = opts.version || '1.0';
    this.parameter_seperator = opts.parameter_seperator || ', ';

    if(typeof opts.last_ampersand === 'undefined') {
        this.last_ampersand = true;
    } else {
        this.last_ampersand = opts.last_ampersand;
    }

    switch (this.signature_method) {
        case 'HMAC-SHA1':
            this.hash = function(base_string, key) {
                return CryptoJS.HmacSHA1(base_string, key).toString(CryptoJS.enc.Base64);
            };
            break;

        case 'HMAC-SHA256':
            this.hash = function(base_string, key) {
                return CryptoJS.HmacSHA256(base_string, key).toString(CryptoJS.enc.Base64);
            };
            break;

        case 'PLAINTEXT':
            this.hash = function(base_string, key) {
                return key;
            };
            break;

        case 'RSA-SHA1':
            throw new Error('oauth-1.0a does not support this signature method right now. Coming Soon...');
        default:
            throw new Error('The OAuth 1.0a protocol defines three signature methods: HMAC-SHA1, RSA-SHA1, and PLAINTEXT only');
    }
}

/**
 * OAuth request authorize
 * @param  {Object} request data
 * {
 *     method,
 *     url,
 *     data
 * }
 * @param  {Object} public and secret token
 * @return {Object} OAuth Authorized data
 */
OAuth.prototype.authorize = function(request, token) {
    var oauth_data = {
        oauth_consumer_key: this.consumer.public,
        oauth_nonce: this.getNonce(),
        oauth_signature_method: this.signature_method,
        oauth_timestamp: this.getTimeStamp(),
        oauth_version: this.version
    };

    if(!token) {
        token = {};
    }

    if(token.public) {
        oauth_data.oauth_token = token.public;
    }

    if(!request.data) {
        request.data = {};
    }

    oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);

    return oauth_data;
};

/**
 * Create a OAuth Signature
 * @param  {Object} request data
 * @param  {Object} token_secret public and secret token
 * @param  {Object} oauth_data   OAuth data
 * @return {String} Signature
 */
OAuth.prototype.getSignature = function(request, token_secret, oauth_data) {
    return this.hash(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));
};

/**
 * Base String = Method + Base Url + ParameterString
 * @param  {Object} request data
 * @param  {Object} OAuth data
 * @return {String} Base String
 */
OAuth.prototype.getBaseString = function(request, oauth_data) {
    return request.method.toUpperCase() + '&' + this.percentEncode(this.getBaseUrl(request.url)) + '&' + this.percentEncode(this.getParameterString(request, oauth_data));
};

/**
 * Get data from url
 * -> merge with oauth data
 * -> percent encode key & value
 * -> sort
 *
 * @param  {Object} request data
 * @param  {Object} OAuth data
 * @return {Object} Parameter string data
 */
OAuth.prototype.getParameterString = function(request, oauth_data) {
    var base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));

    var data_str = '';

    //base_string_data to string
    for(var key in base_string_data) {
        data_str += key + '=' + base_string_data[key] + '&';
    }

    //remove the last character
    data_str = data_str.substr(0, data_str.length - 1);
    return data_str;
};

/**
 * Create a Signing Key
 * @param  {String} token_secret Secret Token
 * @return {String} Signing Key
 */
OAuth.prototype.getSigningKey = function(token_secret) {
    token_secret = token_secret || '';

    if(!this.last_ampersand && !token_secret) {
        return this.percentEncode(this.consumer.secret);
    }

    return this.percentEncode(this.consumer.secret) + '&' + this.percentEncode(token_secret);
};

/**
 * Get base url
 * @param  {String} url
 * @return {String}
 */
OAuth.prototype.getBaseUrl = function(url) {
    return url.split('?')[0];
};

/**
 * Get data from String
 * @param  {String} string
 * @return {Object}
 */
OAuth.prototype.deParam = function(string) {
    var arr = string.split('&');
    var data = {};

    for(var i = 0; i < arr.length; i++) {
        var item = arr[i].split('=');
        data[item[0]] = decodeURIComponent(item[1]);
    }
    return data;
};

/**
 * Get data from url
 * @param  {String} url
 * @return {Object}
 */
OAuth.prototype.deParamUrl = function(url) {
    var tmp = url.split('?');

    if (tmp.length === 1)
        return {};

    return this.deParam(tmp[1]);
};

/**
 * Percent Encode
 * @param  {String} str
 * @return {String} percent encoded string
 */
OAuth.prototype.percentEncode = function(str) {
    return encodeURIComponent(str)
        .replace(/\!/g, "%21")
        .replace(/\*/g, "%2A")
        .replace(/\'/g, "%27")
        .replace(/\(/g, "%28")
        .replace(/\)/g, "%29");
};

/**
 * Percent Encode Object
 * @param  {Object} data
 * @return {Object} percent encoded data
 */
OAuth.prototype.percentEncodeData = function(data) {
    var result = {};

    for(var key in data) {
        result[this.percentEncode(key)] = this.percentEncode(data[key]);
    }

    return result;
};

/**
 * Get OAuth data as Header
 * @param  {Object} oauth_data
 * @return {String} Header data key - value
 */
OAuth.prototype.toHeader = function(oauth_data) {
    oauth_data = this.sortObject(oauth_data);

    var header_value = 'OAuth ';

    for(var key in oauth_data) {
        if (key.indexOf('oauth_') === -1)
            continue;
        header_value += this.percentEncode(key) + '="' + this.percentEncode(oauth_data[key]) + '"' + this.parameter_seperator;
    }

    return {
        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length) //cut the last chars
    };
};

/**
 * Create a random word characters string with input length
 * @return {String} a random word characters string
 */
OAuth.prototype.getNonce = function() {
    var word_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    var result = '';

    for(var i = 0; i < this.nonce_length; i++) {
        result += word_characters[parseInt(Math.random() * word_characters.length, 10)];
    }

    return result;
};

/**
 * Get Current Unix TimeStamp
 * @return {Int} current unix timestamp
 */
OAuth.prototype.getTimeStamp = function() {
    return parseInt(new Date().getTime()/1000, 10);
};

////////////////////// HELPER FUNCTIONS //////////////////////

/**
 * Merge object
 * @param  {Object} obj1
 * @param  {Object} obj2
 * @return {Object}
 */
OAuth.prototype.mergeObject = function(obj1, obj2) {
    var merged_obj = obj1;
    for(var key in obj2) {
        merged_obj[key] = obj2[key];
    }
    return merged_obj;
};

/**
 * Sort object by key
 * @param  {Object} data
 * @return {Object} sorted object
 */
OAuth.prototype.sortObject = function(data) {
    var keys = Object.keys(data);
    var result = {};

    keys.sort();

    for(var i = 0; i < keys.length; i++) {
        var key = keys[i];
        result[key] = data[key];
    }

    return result;
};



var DashboardYelp = (function() {
    // var auth = { 
    //     consumerKey: 'IeRXFUw8ahSfjDE0aHZ0XQ', 
    //     consumerSecret: 'RtqSfcASQ55OEx_0MsaGco2M0j4',
    //     accessToken: 'NN_cOw_0h2QhbtTTtNQF2H4V1OmyHgsu',
    //     accessTokenSecret: '0RJP3gBbfqaAlxP899r3uiDzIGs',
    // };

    // var accessor = {
    //     consumerSecret: auth.consumerSecret,
    //     tokenSecret: auth.accessTokenSecret
    // };

    var oauth = OAuth({
        consumer: {
            public: 'IeRXFUw8ahSfjDE0aHZ0XQ',
            secret: 'RtqSfcASQ55OEx_0MsaGco2M0j4'
        },
        signature_method: 'HMAC-SHA1'
    });

    var token = {
        public: 'NN_cOw_0h2QhbtTTtNQF2H4V1OmyHgsu',
        secret: '0RJP3gBbfqaAlxP899r3uiDzIGs'
    };

    var yelpUrl = "https://api.yelp.com";

    // Send search request to Yelp API.
    var makeSearchRequest = function(url, term, location, onSuccess, onFailure) {
        var request_data = {
            url: yelpUrl + url,
            method: 'POST',
            data: {
                status: 'OAuth request signed'
            }
        };
        $.ajax({
            type: request_data.method,
            url: request_data.url,
            term: term,
            location: location,
            limit: 10,
            dataType: "json",
            success: onSuccess,
            error: onFailure,
            data: oauth.authorize(request_data, token)
        });
        $("search-results-header").append("Best " + term + " near " + location);
    };

    // Activate search button.
    var attachSearchHandler = function(e) {
        searchButton.on('click', function(e) {
            var onSuccess = function(data) {
                data.businesses.each(function(biz) {
                    insertResult(biz);
                });
            };
            var onFailure = function() {
                console.log("error searching Yelp");
            };
        });
        term = $(".search-term").html();
        location = $(".search-location").html();
        makeSearchRequest(yelpUrl + "/v2/search?term=" + term + "&location=" + location,
                          term, location, onSuccess, onFailure);
    };

    // Handle Yelp response (display search result).
    var insertResult = function(biz) {
        var newResult = $(resultTemplate);
        newResult.find(".result-name").text(biz.name);
        newResult.find(".result-address").text(biz.location.address);
        resultsList.append(newResult);
        resultsList.append("bizname = " + biz.name);
        destData = { "name": biz.name, "address": biz.location.address };
        initAddButton(destData);
    };

    // Initialize add button with destination data and attach click handler
    var initAddButton = function(destData) {
        var attachAddButtonHandler = function(e) {
            addButton.on('click', function (e) {
                e.preventDefault (); // Tell the browser to skip its default click action
                var dest = {}; // Prepare the dest object to send to the server
                dest.name = destData["name"];
                dest.address = destData["address"];
             
                // collect the rest of the data for the dest
                var onSuccess = function(data) {
                    if (!data.errors){
                        console.log(data);
                        insertDest(data["destination"]);
                    }else{
                        for (i in data.errors){ 
                            console.log(data.errors[i]); 
                        } 
                    }
                };
                var onFailure = function(data) { 
                    console.log("failure");
                };
                url = "/api/destinations";
                makePostRequest(url, dest, onSuccess, onFailure);
            });
        };
    };
    
    //Create a new Destination
    var makePostRequest = function(url, data, onSuccess, onFailure) {
        $.ajax({
            type: 'POST',
            url: url,
            data: JSON.stringify(data),
            contentType: "application/json",
            dataType: "json",
            success: onSuccess,
            error: onFailure
        });
    };
        
    //Insert Destination into table
    var insertDest = function(dest_obj) {
      // Find a <table> element with id="myTable":
      var table = document.getElementById("destTable");
      // Create an empty <tr> element and add it to the 1st position of the table:
      var row = table.insertRow(1);
      // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
      var id_cell = row.insertCell(0);
      var name_cell = row.insertCell(1);
      var address_cell = row.insertCell(2);
      // Add some text to the new cells:
      id_cell.innerHTML = dest_obj.id;
      name_cell.innerHTML = dest_obj.name;
      address_cell.innerHTML = dest_obj.address;
    };
    
    // Initialize search term and location.
    // Activate search button.
    // Handle requests to Yelp.
    // Handle responses from Yelp.
    var start = function() {
        searchButton = $(".search-button");
        addButton = $(".add-button");
        resultsList = $(".search-results-list");
        resultTemplate = $(".search-results-list .search-result").outerHTML;
        attachSearchHandler();
        initAddButton();
    };

    return {
        start: start
    };
})();