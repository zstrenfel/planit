require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DaysController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Day. As you add validations to Day, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DaysController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
      @trip = FactoryGirl.create(:trip)
      @days = Array.new
      5.times do
        day = FactoryGirl.create(:day)
        @days << day
      end
      # p @days
  end

  describe "GET #index" do
    it "assigns all days from specific trip as @days" do
      @trip.days << @days[0]
      @trip.days << @days[1]
      @trip.days << @days[2]
      get :index, trip_id: @trip.id
      expect(assigns(:days)).to eq([@days[0], @days[1], @days[2]])
    end
  end

  describe "POST #create" do

    context "with valid params" do
      it "assigns a newly created day as @day" do
        new_day = FactoryGirl.build(:day)
        post :create, {:day => new_day}
        expect(assigns(:day)).to be_a(Day)
        expect(assigns(:day)).to be_persisted
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:home_base => "123 New St"}
      }

      it "updates the requested day" do
        day = days[0]
        put :update, {:id => day.to_param, :day => new_attributes}
        day.reload
        expect(:day.home_base).to eq("123 New St")
      end

    end
  end

  # describe "DELETE #destroy" do
  #   it "destroys the requested day" do
  #     day = Day.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => day.to_param}, valid_session
  #     }.to change(Day, :count).by(-1)
  #   end

  #   it "redirects to the days list" do
  #     day = Day.create! valid_attributes
  #     delete :destroy, {:id => day.to_param}, valid_session
  #     expect(response).to redirect_to(days_url)
  #   end
  # end

end
